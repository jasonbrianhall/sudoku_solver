name: Build Sudoku

on:
  push:
    branches: [ master,dev ]
  pull_request:
    branches: [ master,dev ]

  workflow_dispatch:

jobs:
  build-msdos:
    runs-on: ubuntu-latest
    container: 
      image: djfdyuruiry/djgpp
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        apt-get update
        apt-get install -y wget unzip zip

    - name: Download CSDPMI
      working-directory: msdos
      run: |
        wget http://na.mirror.garr.it/mirrors/djgpp/current/v2misc/csdpmi7b.zip
        unzip -o csdpmi7b.zip -d csdpmi

    - name: Build MS-DOS Version
      working-directory: msdos
      run: |
        cp ../shared/*.cpp .
        cp ../shared/*.h .
        g++ dosprint.cpp generatepuzzle.cpp msdos_main.cpp sudoku.cpp -o sudoku.exe
        exe2coff sudoku.exe
        cat csdpmi/bin/CWSDSTUB.EXE sudoku > sudoku.exe
        
    - name: Create MS-DOS Distribution
      working-directory: msdos
      run: |
        mkdir sudoku-msdos-v1.0
        cp sudoku.exe sudoku-msdos-v1.0/
        cp ../README.md sudoku-msdos-v1.0/
        cp ../LICENSE.md sudoku-msdos-v1.0/
        
        echo "Sudoku Solver for MS-DOS
        Version 1.0

        Installation:
        1. dosbox sudoku.exe

        Requirements:
        - MS-DOS or compatible OS
        - 4MB RAM
        - VGA or better graphics" > sudoku-msdos-v1.0/README-MSDOS.txt
        
        zip -r ../Sudoku-MSDOS.zip sudoku-msdos-v1.0

    - name: Upload MS-DOS Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: msdos-artifacts
        path: |
          Sudoku-MSDOS.zip
          msdos/sudoku.exe

  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1
      
    - name: Setup Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install Python dependencies
      working-directory: python_generate_puzzles
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pybind11

    # Build the standalone executable
    - name: Build C++ Executable
      working-directory: windows
      run: |
        msbuild /p:Configuration=Release /p:Platform=x64 SudokuSolver.vcxproj

    # Build the Python extension using setup.py
    - name: Build Python Extension
      working-directory: python_generate_puzzles
      run: |
        python setup.py build_ext --inplace --force

    - name: Create PyInstaller Spec for QT5 App Sudoku Solver
      working-directory: python_generate_puzzles
      shell: cmd
      run: |
        echo # -*- mode: python ; coding: utf-8 -*- > sudoku.spec
        echo. >> sudoku.spec
        echo block_cipher = None >> sudoku.spec
        echo. >> sudoku.spec
        echo a = Analysis( >> sudoku.spec
        echo     ['sudoku_game_qt5.py'], >> sudoku.spec
        echo     pathex=[], >> sudoku.spec
        echo     binaries=[], >> sudoku.spec
        echo     datas=[], >> sudoku.spec
        echo     hiddenimports=['PyQt5.sip'], >> sudoku.spec
        echo     hookspath=[], >> sudoku.spec
        echo     hooksconfig={}, >> sudoku.spec
        echo     runtime_hooks=[], >> sudoku.spec
        echo     excludes=[], >> sudoku.spec
        echo     win_no_prefer_redirects=False, >> sudoku.spec
        echo     win_private_assemblies=False, >> sudoku.spec
        echo     cipher=block_cipher, >> sudoku.spec
        echo     noarchive=False, >> sudoku.spec
        echo ) >> sudoku.spec
        echo. >> sudoku.spec
        echo a.binaries += [('sudoku_solver.pyd', './sudoku_solver.pyd', 'BINARY')] >> sudoku.spec
        echo. >> sudoku.spec
        echo pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher) >> sudoku.spec
        echo. >> sudoku.spec
        echo exe = EXE( >> sudoku.spec
        echo     pyz, >> sudoku.spec
        echo     a.scripts, >> sudoku.spec
        echo     a.binaries, >> sudoku.spec
        echo     a.zipfiles, >> sudoku.spec
        echo     a.datas, >> sudoku.spec
        echo     [], >> sudoku.spec
        echo     name='sudoku_solver_qt5_python', >> sudoku.spec
        echo     debug=False, >> sudoku.spec
        echo     bootloader_ignore_signals=False, >> sudoku.spec
        echo     strip=False, >> sudoku.spec
        echo     upx=True, >> sudoku.spec
        echo     upx_exclude=[], >> sudoku.spec
        echo     runtime_tmpdir=None, >> sudoku.spec
        echo     console=False, >> sudoku.spec
        echo     disable_windowed_traceback=False, >> sudoku.spec
        echo     target_arch=None, >> sudoku.spec
        echo     codesign_identity=None, >> sudoku.spec
        echo     entitlements_file=None, >> sudoku.spec
        echo ) >> sudoku.spec

    - name: Build Python Executable for QT5 Python Solver
      working-directory: python_generate_puzzles
      run: |
        pyinstaller --clean sudoku.spec

    - name: Create PyInstaller Spec for QT5 Sudoku Game
      working-directory: python_generate_puzzles
      shell: cmd
      run: |
        echo # -*- mode: python ; coding: utf-8 -*- > sudoku.spec
        echo. >> sudoku.spec
        echo block_cipher = None >> sudoku.spec
        echo. >> sudoku.spec
        echo a = Analysis( >> sudoku.spec
        echo     ['sudoku_player_qt5.py'], >> sudoku.spec
        echo     pathex=[], >> sudoku.spec
        echo     binaries=[], >> sudoku.spec
        echo     datas=[], >> sudoku.spec
        echo     hiddenimports=['PyQt5.sip'], >> sudoku.spec
        echo     hookspath=[], >> sudoku.spec
        echo     hooksconfig={}, >> sudoku.spec
        echo     runtime_hooks=[], >> sudoku.spec
        echo     excludes=[], >> sudoku.spec
        echo     win_no_prefer_redirects=False, >> sudoku.spec
        echo     win_private_assemblies=False, >> sudoku.spec
        echo     cipher=block_cipher, >> sudoku.spec
        echo     noarchive=False, >> sudoku.spec
        echo ) >> sudoku.spec
        echo. >> sudoku.spec
        echo a.binaries += [('sudoku_solver.pyd', './sudoku_solver.pyd', 'BINARY')] >> sudoku.spec
        echo. >> sudoku.spec
        echo pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher) >> sudoku.spec
        echo. >> sudoku.spec
        echo exe = EXE( >> sudoku.spec
        echo     pyz, >> sudoku.spec
        echo     a.scripts, >> sudoku.spec
        echo     a.binaries, >> sudoku.spec
        echo     a.zipfiles, >> sudoku.spec
        echo     a.datas, >> sudoku.spec
        echo     [], >> sudoku.spec
        echo     name='sudoku_puzzler', >> sudoku.spec
        echo     debug=False, >> sudoku.spec
        echo     bootloader_ignore_signals=False, >> sudoku.spec
        echo     strip=False, >> sudoku.spec
        echo     upx=True, >> sudoku.spec
        echo     upx_exclude=[], >> sudoku.spec
        echo     runtime_tmpdir=None, >> sudoku.spec
        echo     console=False, >> sudoku.spec
        echo     disable_windowed_traceback=False, >> sudoku.spec
        echo     target_arch=None, >> sudoku.spec
        echo     codesign_identity=None, >> sudoku.spec
        echo     entitlements_file=None, >> sudoku.spec
        echo ) >> sudoku.spec

    - name: Build Python Executable for QT5 Python Puzzler
      working-directory: python_generate_puzzles
      run: |
        pyinstaller --clean sudoku.spec

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifacts
        path: |
          windows/x64/Release/SudokuSolver.exe
          python_generate_puzzles/dist/sudoku_solver_qt5_python.exe
          python_generate_puzzles/dist/sudoku_puzzler.exe

  build-gtk:
    runs-on: ubuntu-latest
    container: 
      image: fedora:latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        dnf -y update
        dnf -y install mingw64-gcc mingw64-gcc-c++ mingw64-gtk3 mingw64-gtkmm30 wine wine-devel wixl binutils zip

    - name: Build GTK Windows Version
      working-directory: gtk3
      run: |
        chmod +x ../shared/collect_dlls.sh
        mkdir -p build/windows_gtk3
        x86_64-w64-mingw32-g++ -std=c++11 -Wall -O2 \
          $(mingw64-pkg-config --cflags gtk+-3.0) \
          sudoku_game.cpp sudoku.cpp debug.cpp generatepuzzle.cpp \
          -o build/windows_gtk3/sudoku_game_gtk3.exe \
          $(mingw64-pkg-config --libs gtk+-3.0) -lstdc++ -mwindows

    - name: Collect DLLs for GTK Windows Version
      working-directory: gtk3
      run: |
        mkdir -p build/windows_gtk3
        ../shared/collect_dlls.sh build/windows_gtk3/sudoku_game_gtk3.exe \
          /usr/x86_64-w64-mingw32/sys-root/mingw/bin \
          build/windows_gtk3

    - name: Create ZIP Archive
      working-directory: gtk3
      run: |
        cp ../README.md build/windows_gtk3/
        cp ../LICENSE.md build/windows_gtk3/
        cd build/windows_gtk3
        zip -r ../../../Sudoku-GTK3-Windows.zip ./*

    - name: Upload GTK Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gtk-artifacts
        path: Sudoku-GTK3-Windows.zip

  create-release:
    needs: [build-msdos, build-windows, build-gtk]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push'
    
    steps:
    - name: Download MS-DOS Artifacts
      uses: actions/download-artifact@v4
      with:
        name: msdos-artifacts
        path: msdos-artifacts

    - name: Download Windows Artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-artifacts
        path: windows-artifacts

    - name: Download GTK Artifacts
      uses: actions/download-artifact@v4
      with:
        name: gtk-artifacts
        path: gtk-artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          msdos-artifacts/Sudoku-MSDOS.zip
          msdos-artifacts/sudoku.exe
          windows/x64/Release/SudokuSolver.exe
          python_generate_puzzles/dist/sudoku_solver_qt5_python.exe
          python_generate_puzzles/dist/sudoku_puzzler.exe
          gtk-artifacts/Sudoku-GTK3-Windows.zip
        tag_name: ${{ github.ref == 'refs/heads/master' && format('v{0}', github.run_number) || format('bleedingedge-v{0}', github.run_number) }}
        name: ${{ github.ref == 'refs/heads/master' && format('Release {0}', github.run_number) || format('Dev Build {0}', github.run_number) }}
        draft: false
        prerelease: ${{ github.ref != 'refs/heads/master' }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ${{ github.ref == 'refs/heads/master' && 'Release build' || 'Development build' }}
          Commit: ${{ github.sha }}
          Build number: ${{ github.run_number }}
          
          This release includes:
          - MS-DOS version (sudoku.exe)
          - Windows C++ Native Sudoku Solver
          - Python QT5 Sudoku Solver
          - Python QT5 Sudoku Puzzler Game
          - GTK3 Windows Puzzle Game
